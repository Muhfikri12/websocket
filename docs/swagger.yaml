basePath: /
definitions:
  domain.Customer:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  domain.Order:
    properties:
      createdAt:
        type: string
      customer:
        $ref: '#/definitions/domain.Customer'
      customerID:
        type: integer
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/domain.OrderItem'
        type: array
      paymentMethod:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  domain.OrderItem:
    properties:
      id:
        type: integer
      order:
        $ref: '#/definitions/domain.Order'
      orderID:
        type: integer
      quantity:
        type: integer
      unitPrice:
        type: number
      variantID:
        type: integer
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        example: admin@mail.com
        type: string
      full_name:
        type: string
      password:
        example: password
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  handler.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: lumoshive.academy@gmail.com
    name: Team-1
    url: https://academy.lumoshive.com/contact-us
  description: Nothing.
  license:
    name: Lumoshive Academy
    url: https://academy.lumoshive.com
  termsOfService: http://example.com/terms/
  title: Ecommerce Dashboard API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: authenticate user
      parameters:
      - description: ' '
        in: body
        name: domain.User
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: user authenticated
          schema:
            $ref: '#/definitions/handler.Response'
        "401":
          description: invalid username and/or password
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: User login
      tags:
      - Auth
  /orders:
    get:
      consumes:
      - application/json
      description: Get customer order
      parameters:
      - description: ' '
        in: body
        name: domain.Order
        required: true
        schema:
          $ref: '#/definitions/domain.Order'
      produces:
      - application/json
      responses:
        "200":
          description: order retrived
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: no data found
          schema:
            $ref: '#/definitions/handler.Response'
        "422":
          description: invalid input
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Customer order
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Get customer orders
      produces:
      - application/json
      responses:
        "200":
          description: orders retrieved
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: no data found
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Customer orders
      tags:
      - Order
    put:
      consumes:
      - application/json
      description: Update customer order
      parameters:
      - description: ' '
        in: body
        name: domain.Order
        required: true
        schema:
          $ref: '#/definitions/domain.Order'
      produces:
      - application/json
      responses:
        "200":
          description: order updated
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: no data found
          schema:
            $ref: '#/definitions/handler.Response'
        "422":
          description: invalid input
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Customer order
      tags:
      - Order
  /password-reset:
    post:
      consumes:
      - application/json
      description: request password reset
      produces:
      - application/json
      responses:
        "200":
          description: password reset link sent
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: failed to reset password
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Password Reset
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: register staff
      parameters:
      - description: ' '
        in: body
        name: domain.User
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: login successfully
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Staff Registration
      tags:
      - Auth
  /users:
    get:
      consumes:
      - application/json
      description: email must be valid when users want to reset their passwords
      produces:
      - application/json
      responses:
        "200":
          description: email is valid
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Check Email
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  token:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
