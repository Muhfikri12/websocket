basePath: /
definitions:
  domain.ResponseStock:
    properties:
      currentStock:
        type: integer
      description:
        type: string
      product:
        type: string
      qty:
        type: integer
      variant:
        $ref: '#/definitions/domain.SizeColor'
    type: object
  domain.SizeColor:
    properties:
      color:
        type: string
      size:
        type: string
    type: object
  domain.Stock:
    properties:
      description:
        type: string
      id:
        type: integer
      productVariantId:
        type: integer
      qty:
        type: integer
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        example: admin@mail.com
        type: string
      full_name:
        type: string
      password:
        example: password
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  handler.FormStock:
    properties:
      newStock:
        type: integer
    type: object
  handler.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: lumoshive.academy@gmail.com
    name: Team-1
    url: https://academy.lumoshive.com/contact-us
  description: Nothing.
  license:
    name: Lumoshive Academy
    url: https://academy.lumoshive.com
  termsOfService: http://example.com/terms/
  title: Ecommerce Dashboard API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: authenticate user
      parameters:
      - description: ' '
        in: body
        name: domain.User
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: user authenticated
          schema:
            $ref: '#/definitions/handler.Response'
        "401":
          description: invalid username and/or password
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: User login
      tags:
      - Auth
  /orders:
    get:
      consumes:
      - application/json
      description: Get customer orders
      produces:
      - application/json
      responses:
        "200":
          description: orders retrieved
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: no data found
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Customer orders
      tags:
      - Order
  /orders/:id:
    get:
      consumes:
      - application/json
      description: Get customer order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: order retrived
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: no data found
          schema:
            $ref: '#/definitions/handler.Response'
        "422":
          description: invalid input
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Customer order
      tags:
      - Order
    put:
      consumes:
      - application/json
      description: Update customer order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: order updated
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: no data found
          schema:
            $ref: '#/definitions/handler.Response'
        "422":
          description: invalid input
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Customer order
      tags:
      - Order
  /password-reset:
    post:
      consumes:
      - application/json
      description: request password reset
      produces:
      - application/json
      responses:
        "200":
          description: password reset link sent
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: failed to reset password
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Password Reset
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: register staff
      parameters:
      - description: ' '
        in: body
        name: domain.User
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: login successfully
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Staff Registration
      tags:
      - Auth
  /stock/{id}:
    delete:
      consumes:
      - application/json
      description: Delete stock by product variant ID.
      parameters:
      - description: Product Variant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Stock deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Stock'
              type: object
        "400":
          description: Invalid parameters or bad request
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Delete Stock
      tags:
      - Stock
  /stock/{productVariantId}:
    get:
      consumes:
      - application/json
      description: Get details of the stock by product variant ID.
      parameters:
      - description: Product Variant ID
        in: path
        name: productVariantId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Stock details retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.ResponseStock'
              type: object
        "400":
          description: Invalid parameters or bad request
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Get Stock Details
      tags:
      - Stock
    put:
      consumes:
      - application/json
      description: Edit the stock quantity by product variant ID.
      parameters:
      - description: Product Variant ID
        in: path
        name: productVariantId
        required: true
        type: integer
      - description: New Stock Quantity
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.FormStock'
      produces:
      - application/json
      responses:
        "200":
          description: Stock updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Stock'
              type: object
        "400":
          description: Invalid parameters or bad request
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Edit Stock Details
      tags:
      - Stock
  /users:
    get:
      consumes:
      - application/json
      description: email must be valid when users want to reset their passwords
      produces:
      - application/json
      responses:
        "200":
          description: email is valid
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Check Email
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  token:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
